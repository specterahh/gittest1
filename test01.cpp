#include<iostream>
using namespace std;
int main(){
    cout << "fuck you" << endl;
    return 0;
}
// 在版本控制系统中，如Git，当你在不同的分支（branch）上工作时，每个分支都有自己的文件和提交历史。以下是一些可能导致本地文件被删除的操作：

// 1. **切换分支**：当你从`branch1`切换到`branch2`时，Git会将工作目录更新为`branch2`的状态。如果`branch2`中没有`branch1`特有的文件（比如文件1和2），这些文件会被删除。

// 2. **合并（Merge）**：如果你在`branch2`上执行`merge branch1`，Git会尝试合并两个分支的更改。如果`branch1`有`branch2`没有的文件，这些文件会被添加到`branch2`。但如果`branch2`有`branch1`没有的文件，并且这些文件在`branch1`中被删除了，那么在合并时，这些文件可能会被删除。

// 3. **拉取（Pull）**：如果你从远程仓库拉取最新的更改到本地，并且远程仓库的分支状态与你的本地分支不同，可能会导致本地文件的更改或删除。

// 4. **重置（Reset）**：如果你使用`git reset --hard`命令，Git会将HEAD指针移动到指定的提交，并重置工作目录和索引到那个状态。如果那个提交没有某些文件，这些文件会被删除。

// 5. **检出（Checkout）**：使用`git checkout`命令切换到另一个分支或者特定的提交，也会更新工作目录到那个状态，可能会删除当前分支独有的文件。

// 6. **删除文件后提交**：如果在某个分支上删除了文件并提交了这些更改，那么这些文件在该分支上就会被删除。

// 7. **使用`git clean`**：如果你在Git工作目录中运行`git clean`命令，可能会删除未跟踪的文件和目录。使用`git clean -f`会删除未跟踪的文件，使用`git clean -fd`会删除未跟踪的文件和目录。

// 8. **使用`git rm`**：如果你使用`git rm`命令从Git中删除文件，并且随后进行了提交，那么这些文件就会被永久删除。